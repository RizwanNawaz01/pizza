// server/api/admin/orders/[id].ts
import { getQuery, createError } from 'h3'
import prisma from '../../../utils/prisma'

export default defineEventHandler(async (event) => {
  try {
    const { id } = event.context.params   // or event.context.params.id in Nuxt 3
    if (!id) {
      throw createError({ statusCode: 400, statusMessage: 'Order ID is required' })
    }

    const orderId = parseInt(id as string, 10)
    if (isNaN(orderId)) {
      throw createError({ statusCode: 400, statusMessage: 'Invalid Order ID' })
    }

    // Fetch order from database
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })

    if (!order) {
      throw createError({ statusCode: 404, statusMessage: 'Order not found' })
    }

    return {
      order
    }
  } catch (error: any) {
    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.message || 'Internal Server Error'
    })
  }
})
