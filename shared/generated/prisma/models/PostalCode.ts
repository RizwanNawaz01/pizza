
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PostalCode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as prisma from "../internal/prismaNamespace.js"

/**
 * Model PostalCode
 * 
 */
export type PostalCodeModel = runtime.Types.Result.DefaultSelection<Prisma.$PostalCodePayload>

export type AggregatePostalCode = {
  _count: PostalCodeCountAggregateOutputType | null
  _avg: PostalCodeAvgAggregateOutputType | null
  _sum: PostalCodeSumAggregateOutputType | null
  _min: PostalCodeMinAggregateOutputType | null
  _max: PostalCodeMaxAggregateOutputType | null
}

export type PostalCodeAvgAggregateOutputType = {
  id: number | null
}

export type PostalCodeSumAggregateOutputType = {
  id: number | null
}

export type PostalCodeMinAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostalCodeMaxAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostalCodeCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PostalCodeAvgAggregateInputType = {
  id?: true
}

export type PostalCodeSumAggregateInputType = {
  id?: true
}

export type PostalCodeMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PostalCodeMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PostalCodeCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PostalCodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostalCode to aggregate.
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostalCodes to fetch.
   */
  orderBy?: Prisma.PostalCodeOrderByWithRelationInput | Prisma.PostalCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostalCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostalCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostalCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PostalCodes
  **/
  _count?: true | PostalCodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PostalCodeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PostalCodeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostalCodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostalCodeMaxAggregateInputType
}

export type GetPostalCodeAggregateType<T extends PostalCodeAggregateArgs> = {
      [P in keyof T & keyof AggregatePostalCode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePostalCode[P]>
    : Prisma.GetScalarType<T[P], AggregatePostalCode[P]>
}




export type PostalCodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostalCodeWhereInput
  orderBy?: Prisma.PostalCodeOrderByWithAggregationInput | Prisma.PostalCodeOrderByWithAggregationInput[]
  by: Prisma.PostalCodeScalarFieldEnum[] | Prisma.PostalCodeScalarFieldEnum
  having?: Prisma.PostalCodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostalCodeCountAggregateInputType | true
  _avg?: PostalCodeAvgAggregateInputType
  _sum?: PostalCodeSumAggregateInputType
  _min?: PostalCodeMinAggregateInputType
  _max?: PostalCodeMaxAggregateInputType
}

export type PostalCodeGroupByOutputType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
  _count: PostalCodeCountAggregateOutputType | null
  _avg: PostalCodeAvgAggregateOutputType | null
  _sum: PostalCodeSumAggregateOutputType | null
  _min: PostalCodeMinAggregateOutputType | null
  _max: PostalCodeMaxAggregateOutputType | null
}

type GetPostalCodeGroupByPayload<T extends PostalCodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostalCodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostalCodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostalCodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostalCodeGroupByOutputType[P]>
      }
    >
  >



export type PostalCodeWhereInput = {
  AND?: Prisma.PostalCodeWhereInput | Prisma.PostalCodeWhereInput[]
  OR?: Prisma.PostalCodeWhereInput[]
  NOT?: Prisma.PostalCodeWhereInput | Prisma.PostalCodeWhereInput[]
  id?: Prisma.IntFilter<"PostalCode"> | number
  name?: Prisma.StringFilter<"PostalCode"> | string
  createdAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
  cities?: Prisma.CityListRelationFilter
}

export type PostalCodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  cities?: Prisma.CityOrderByRelationAggregateInput
  _relevance?: Prisma.PostalCodeOrderByRelevanceInput
}

export type PostalCodeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.PostalCodeWhereInput | Prisma.PostalCodeWhereInput[]
  OR?: Prisma.PostalCodeWhereInput[]
  NOT?: Prisma.PostalCodeWhereInput | Prisma.PostalCodeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
  cities?: Prisma.CityListRelationFilter
}, "id" | "name">

export type PostalCodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PostalCodeCountOrderByAggregateInput
  _avg?: Prisma.PostalCodeAvgOrderByAggregateInput
  _max?: Prisma.PostalCodeMaxOrderByAggregateInput
  _min?: Prisma.PostalCodeMinOrderByAggregateInput
  _sum?: Prisma.PostalCodeSumOrderByAggregateInput
}

export type PostalCodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostalCodeScalarWhereWithAggregatesInput | Prisma.PostalCodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostalCodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostalCodeScalarWhereWithAggregatesInput | Prisma.PostalCodeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PostalCode"> | number
  name?: Prisma.StringWithAggregatesFilter<"PostalCode"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PostalCode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PostalCode"> | Date | string
}

export type PostalCodeCreateInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  cities?: Prisma.CityCreateNestedManyWithoutPostalcodesInput
}

export type PostalCodeUncheckedCreateInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  cities?: Prisma.CityUncheckedCreateNestedManyWithoutPostalcodesInput
}

export type PostalCodeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cities?: Prisma.CityUpdateManyWithoutPostalcodesNestedInput
}

export type PostalCodeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cities?: Prisma.CityUncheckedUpdateManyWithoutPostalcodesNestedInput
}

export type PostalCodeCreateManyInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostalCodeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostalCodeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostalCodeListRelationFilter = {
  every?: Prisma.PostalCodeWhereInput
  some?: Prisma.PostalCodeWhereInput
  none?: Prisma.PostalCodeWhereInput
}

export type PostalCodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostalCodeOrderByRelevanceInput = {
  fields: Prisma.PostalCodeOrderByRelevanceFieldEnum | Prisma.PostalCodeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PostalCodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostalCodeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PostalCodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostalCodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostalCodeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PostalCodeCreateNestedManyWithoutCitiesInput = {
  create?: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput> | Prisma.PostalCodeCreateWithoutCitiesInput[] | Prisma.PostalCodeUncheckedCreateWithoutCitiesInput[]
  connectOrCreate?: Prisma.PostalCodeCreateOrConnectWithoutCitiesInput | Prisma.PostalCodeCreateOrConnectWithoutCitiesInput[]
  connect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
}

export type PostalCodeUncheckedCreateNestedManyWithoutCitiesInput = {
  create?: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput> | Prisma.PostalCodeCreateWithoutCitiesInput[] | Prisma.PostalCodeUncheckedCreateWithoutCitiesInput[]
  connectOrCreate?: Prisma.PostalCodeCreateOrConnectWithoutCitiesInput | Prisma.PostalCodeCreateOrConnectWithoutCitiesInput[]
  connect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
}

export type PostalCodeUpdateManyWithoutCitiesNestedInput = {
  create?: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput> | Prisma.PostalCodeCreateWithoutCitiesInput[] | Prisma.PostalCodeUncheckedCreateWithoutCitiesInput[]
  connectOrCreate?: Prisma.PostalCodeCreateOrConnectWithoutCitiesInput | Prisma.PostalCodeCreateOrConnectWithoutCitiesInput[]
  upsert?: Prisma.PostalCodeUpsertWithWhereUniqueWithoutCitiesInput | Prisma.PostalCodeUpsertWithWhereUniqueWithoutCitiesInput[]
  set?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  disconnect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  delete?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  connect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  update?: Prisma.PostalCodeUpdateWithWhereUniqueWithoutCitiesInput | Prisma.PostalCodeUpdateWithWhereUniqueWithoutCitiesInput[]
  updateMany?: Prisma.PostalCodeUpdateManyWithWhereWithoutCitiesInput | Prisma.PostalCodeUpdateManyWithWhereWithoutCitiesInput[]
  deleteMany?: Prisma.PostalCodeScalarWhereInput | Prisma.PostalCodeScalarWhereInput[]
}

export type PostalCodeUncheckedUpdateManyWithoutCitiesNestedInput = {
  create?: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput> | Prisma.PostalCodeCreateWithoutCitiesInput[] | Prisma.PostalCodeUncheckedCreateWithoutCitiesInput[]
  connectOrCreate?: Prisma.PostalCodeCreateOrConnectWithoutCitiesInput | Prisma.PostalCodeCreateOrConnectWithoutCitiesInput[]
  upsert?: Prisma.PostalCodeUpsertWithWhereUniqueWithoutCitiesInput | Prisma.PostalCodeUpsertWithWhereUniqueWithoutCitiesInput[]
  set?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  disconnect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  delete?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  connect?: Prisma.PostalCodeWhereUniqueInput | Prisma.PostalCodeWhereUniqueInput[]
  update?: Prisma.PostalCodeUpdateWithWhereUniqueWithoutCitiesInput | Prisma.PostalCodeUpdateWithWhereUniqueWithoutCitiesInput[]
  updateMany?: Prisma.PostalCodeUpdateManyWithWhereWithoutCitiesInput | Prisma.PostalCodeUpdateManyWithWhereWithoutCitiesInput[]
  deleteMany?: Prisma.PostalCodeScalarWhereInput | Prisma.PostalCodeScalarWhereInput[]
}

export type PostalCodeCreateWithoutCitiesInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostalCodeUncheckedCreateWithoutCitiesInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostalCodeCreateOrConnectWithoutCitiesInput = {
  where: Prisma.PostalCodeWhereUniqueInput
  create: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput>
}

export type PostalCodeUpsertWithWhereUniqueWithoutCitiesInput = {
  where: Prisma.PostalCodeWhereUniqueInput
  update: Prisma.XOR<Prisma.PostalCodeUpdateWithoutCitiesInput, Prisma.PostalCodeUncheckedUpdateWithoutCitiesInput>
  create: Prisma.XOR<Prisma.PostalCodeCreateWithoutCitiesInput, Prisma.PostalCodeUncheckedCreateWithoutCitiesInput>
}

export type PostalCodeUpdateWithWhereUniqueWithoutCitiesInput = {
  where: Prisma.PostalCodeWhereUniqueInput
  data: Prisma.XOR<Prisma.PostalCodeUpdateWithoutCitiesInput, Prisma.PostalCodeUncheckedUpdateWithoutCitiesInput>
}

export type PostalCodeUpdateManyWithWhereWithoutCitiesInput = {
  where: Prisma.PostalCodeScalarWhereInput
  data: Prisma.XOR<Prisma.PostalCodeUpdateManyMutationInput, Prisma.PostalCodeUncheckedUpdateManyWithoutCitiesInput>
}

export type PostalCodeScalarWhereInput = {
  AND?: Prisma.PostalCodeScalarWhereInput | Prisma.PostalCodeScalarWhereInput[]
  OR?: Prisma.PostalCodeScalarWhereInput[]
  NOT?: Prisma.PostalCodeScalarWhereInput | Prisma.PostalCodeScalarWhereInput[]
  id?: Prisma.IntFilter<"PostalCode"> | number
  name?: Prisma.StringFilter<"PostalCode"> | string
  createdAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostalCode"> | Date | string
}

export type PostalCodeUpdateWithoutCitiesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostalCodeUncheckedUpdateWithoutCitiesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostalCodeUncheckedUpdateManyWithoutCitiesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PostalCodeCountOutputType
 */

export type PostalCodeCountOutputType = {
  cities: number
}

export type PostalCodeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cities?: boolean | PostalCodeCountOutputTypeCountCitiesArgs
}

/**
 * PostalCodeCountOutputType without action
 */
export type PostalCodeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCodeCountOutputType
   */
  select?: Prisma.PostalCodeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PostalCodeCountOutputType without action
 */
export type PostalCodeCountOutputTypeCountCitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CityWhereInput
}


export type PostalCodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  cities?: boolean | Prisma.PostalCode$citiesArgs<ExtArgs>
  _count?: boolean | Prisma.PostalCodeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postalCode"]>



export type PostalCodeSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PostalCodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["postalCode"]>
export type PostalCodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cities?: boolean | Prisma.PostalCode$citiesArgs<ExtArgs>
  _count?: boolean | Prisma.PostalCodeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $PostalCodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PostalCode"
  objects: {
    cities: Prisma.$CityPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["postalCode"]>
  composites: {}
}

export type PostalCodeGetPayload<S extends boolean | null | undefined | PostalCodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostalCodePayload, S>

export type PostalCodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostalCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PostalCodeCountAggregateInputType | true
  }

export interface PostalCodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostalCode'], meta: { name: 'PostalCode' } }
  /**
   * Find zero or one PostalCode that matches the filter.
   * @param {PostalCodeFindUniqueArgs} args - Arguments to find a PostalCode
   * @example
   * // Get one PostalCode
   * const postalCode = await prisma.postalCode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostalCodeFindUniqueArgs>(args: Prisma.SelectSubset<T, PostalCodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PostalCode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostalCodeFindUniqueOrThrowArgs} args - Arguments to find a PostalCode
   * @example
   * // Get one PostalCode
   * const postalCode = await prisma.postalCode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostalCodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostalCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostalCode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeFindFirstArgs} args - Arguments to find a PostalCode
   * @example
   * // Get one PostalCode
   * const postalCode = await prisma.postalCode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostalCodeFindFirstArgs>(args?: Prisma.SelectSubset<T, PostalCodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostalCode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeFindFirstOrThrowArgs} args - Arguments to find a PostalCode
   * @example
   * // Get one PostalCode
   * const postalCode = await prisma.postalCode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostalCodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostalCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PostalCodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PostalCodes
   * const postalCodes = await prisma.postalCode.findMany()
   * 
   * // Get first 10 PostalCodes
   * const postalCodes = await prisma.postalCode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const postalCodeWithIdOnly = await prisma.postalCode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PostalCodeFindManyArgs>(args?: Prisma.SelectSubset<T, PostalCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PostalCode.
   * @param {PostalCodeCreateArgs} args - Arguments to create a PostalCode.
   * @example
   * // Create one PostalCode
   * const PostalCode = await prisma.postalCode.create({
   *   data: {
   *     // ... data to create a PostalCode
   *   }
   * })
   * 
   */
  create<T extends PostalCodeCreateArgs>(args: Prisma.SelectSubset<T, PostalCodeCreateArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PostalCodes.
   * @param {PostalCodeCreateManyArgs} args - Arguments to create many PostalCodes.
   * @example
   * // Create many PostalCodes
   * const postalCode = await prisma.postalCode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostalCodeCreateManyArgs>(args?: Prisma.SelectSubset<T, PostalCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a PostalCode.
   * @param {PostalCodeDeleteArgs} args - Arguments to delete one PostalCode.
   * @example
   * // Delete one PostalCode
   * const PostalCode = await prisma.postalCode.delete({
   *   where: {
   *     // ... filter to delete one PostalCode
   *   }
   * })
   * 
   */
  delete<T extends PostalCodeDeleteArgs>(args: Prisma.SelectSubset<T, PostalCodeDeleteArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PostalCode.
   * @param {PostalCodeUpdateArgs} args - Arguments to update one PostalCode.
   * @example
   * // Update one PostalCode
   * const postalCode = await prisma.postalCode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostalCodeUpdateArgs>(args: Prisma.SelectSubset<T, PostalCodeUpdateArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PostalCodes.
   * @param {PostalCodeDeleteManyArgs} args - Arguments to filter PostalCodes to delete.
   * @example
   * // Delete a few PostalCodes
   * const { count } = await prisma.postalCode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostalCodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostalCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostalCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PostalCodes
   * const postalCode = await prisma.postalCode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostalCodeUpdateManyArgs>(args: Prisma.SelectSubset<T, PostalCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one PostalCode.
   * @param {PostalCodeUpsertArgs} args - Arguments to update or create a PostalCode.
   * @example
   * // Update or create a PostalCode
   * const postalCode = await prisma.postalCode.upsert({
   *   create: {
   *     // ... data to create a PostalCode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PostalCode we want to update
   *   }
   * })
   */
  upsert<T extends PostalCodeUpsertArgs>(args: Prisma.SelectSubset<T, PostalCodeUpsertArgs<ExtArgs>>): Prisma.Prisma__PostalCodeClient<runtime.Types.Result.GetResult<Prisma.$PostalCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PostalCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeCountArgs} args - Arguments to filter PostalCodes to count.
   * @example
   * // Count the number of PostalCodes
   * const count = await prisma.postalCode.count({
   *   where: {
   *     // ... the filter for the PostalCodes we want to count
   *   }
   * })
  **/
  count<T extends PostalCodeCountArgs>(
    args?: Prisma.Subset<T, PostalCodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostalCodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PostalCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostalCodeAggregateArgs>(args: Prisma.Subset<T, PostalCodeAggregateArgs>): Prisma.PrismaPromise<GetPostalCodeAggregateType<T>>

  /**
   * Group by PostalCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostalCodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostalCodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostalCodeGroupByArgs['orderBy'] }
      : { orderBy?: PostalCodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostalCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostalCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PostalCode model
 */
readonly fields: PostalCodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PostalCode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostalCodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  cities<T extends Prisma.PostalCode$citiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostalCode$citiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PostalCode model
 */
export interface PostalCodeFieldRefs {
  readonly id: Prisma.FieldRef<"PostalCode", 'Int'>
  readonly name: Prisma.FieldRef<"PostalCode", 'String'>
  readonly createdAt: Prisma.FieldRef<"PostalCode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PostalCode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PostalCode findUnique
 */
export type PostalCodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter, which PostalCode to fetch.
   */
  where: Prisma.PostalCodeWhereUniqueInput
}

/**
 * PostalCode findUniqueOrThrow
 */
export type PostalCodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter, which PostalCode to fetch.
   */
  where: Prisma.PostalCodeWhereUniqueInput
}

/**
 * PostalCode findFirst
 */
export type PostalCodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter, which PostalCode to fetch.
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostalCodes to fetch.
   */
  orderBy?: Prisma.PostalCodeOrderByWithRelationInput | Prisma.PostalCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostalCodes.
   */
  cursor?: Prisma.PostalCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostalCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostalCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostalCodes.
   */
  distinct?: Prisma.PostalCodeScalarFieldEnum | Prisma.PostalCodeScalarFieldEnum[]
}

/**
 * PostalCode findFirstOrThrow
 */
export type PostalCodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter, which PostalCode to fetch.
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostalCodes to fetch.
   */
  orderBy?: Prisma.PostalCodeOrderByWithRelationInput | Prisma.PostalCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostalCodes.
   */
  cursor?: Prisma.PostalCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostalCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostalCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostalCodes.
   */
  distinct?: Prisma.PostalCodeScalarFieldEnum | Prisma.PostalCodeScalarFieldEnum[]
}

/**
 * PostalCode findMany
 */
export type PostalCodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter, which PostalCodes to fetch.
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostalCodes to fetch.
   */
  orderBy?: Prisma.PostalCodeOrderByWithRelationInput | Prisma.PostalCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PostalCodes.
   */
  cursor?: Prisma.PostalCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostalCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostalCodes.
   */
  skip?: number
  distinct?: Prisma.PostalCodeScalarFieldEnum | Prisma.PostalCodeScalarFieldEnum[]
}

/**
 * PostalCode create
 */
export type PostalCodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * The data needed to create a PostalCode.
   */
  data: Prisma.XOR<Prisma.PostalCodeCreateInput, Prisma.PostalCodeUncheckedCreateInput>
}

/**
 * PostalCode createMany
 */
export type PostalCodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PostalCodes.
   */
  data: Prisma.PostalCodeCreateManyInput | Prisma.PostalCodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PostalCode update
 */
export type PostalCodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * The data needed to update a PostalCode.
   */
  data: Prisma.XOR<Prisma.PostalCodeUpdateInput, Prisma.PostalCodeUncheckedUpdateInput>
  /**
   * Choose, which PostalCode to update.
   */
  where: Prisma.PostalCodeWhereUniqueInput
}

/**
 * PostalCode updateMany
 */
export type PostalCodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PostalCodes.
   */
  data: Prisma.XOR<Prisma.PostalCodeUpdateManyMutationInput, Prisma.PostalCodeUncheckedUpdateManyInput>
  /**
   * Filter which PostalCodes to update
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * Limit how many PostalCodes to update.
   */
  limit?: number
}

/**
 * PostalCode upsert
 */
export type PostalCodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * The filter to search for the PostalCode to update in case it exists.
   */
  where: Prisma.PostalCodeWhereUniqueInput
  /**
   * In case the PostalCode found by the `where` argument doesn't exist, create a new PostalCode with this data.
   */
  create: Prisma.XOR<Prisma.PostalCodeCreateInput, Prisma.PostalCodeUncheckedCreateInput>
  /**
   * In case the PostalCode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostalCodeUpdateInput, Prisma.PostalCodeUncheckedUpdateInput>
}

/**
 * PostalCode delete
 */
export type PostalCodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
  /**
   * Filter which PostalCode to delete.
   */
  where: Prisma.PostalCodeWhereUniqueInput
}

/**
 * PostalCode deleteMany
 */
export type PostalCodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostalCodes to delete
   */
  where?: Prisma.PostalCodeWhereInput
  /**
   * Limit how many PostalCodes to delete.
   */
  limit?: number
}

/**
 * PostalCode.cities
 */
export type PostalCode$citiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the City
   */
  select?: Prisma.CitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the City
   */
  omit?: Prisma.CityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CityInclude<ExtArgs> | null
  where?: Prisma.CityWhereInput
  orderBy?: Prisma.CityOrderByWithRelationInput | Prisma.CityOrderByWithRelationInput[]
  cursor?: Prisma.CityWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CityScalarFieldEnum | Prisma.CityScalarFieldEnum[]
}

/**
 * PostalCode without action
 */
export type PostalCodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostalCode
   */
  select?: Prisma.PostalCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostalCode
   */
  omit?: Prisma.PostalCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostalCodeInclude<ExtArgs> | null
}
