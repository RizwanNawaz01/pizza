
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Slider` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as prisma from "../internal/prismaNamespace.js"

/**
 * Model Slider
 * 
 */
export type SliderModel = runtime.Types.Result.DefaultSelection<Prisma.$SliderPayload>

export type AggregateSlider = {
  _count: SliderCountAggregateOutputType | null
  _avg: SliderAvgAggregateOutputType | null
  _sum: SliderSumAggregateOutputType | null
  _min: SliderMinAggregateOutputType | null
  _max: SliderMaxAggregateOutputType | null
}

export type SliderAvgAggregateOutputType = {
  id: number | null
  order: number | null
}

export type SliderSumAggregateOutputType = {
  id: number | null
  order: number | null
}

export type SliderMinAggregateOutputType = {
  id: number | null
  title: string | null
  subtitle: string | null
  image: string | null
  gradident: string | null
  smallTitle: string | null
  smallSubtitle: string | null
  link: string | null
  order: number | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  linkName: string | null
}

export type SliderMaxAggregateOutputType = {
  id: number | null
  title: string | null
  subtitle: string | null
  image: string | null
  gradident: string | null
  smallTitle: string | null
  smallSubtitle: string | null
  link: string | null
  order: number | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  linkName: string | null
}

export type SliderCountAggregateOutputType = {
  id: number
  title: number
  subtitle: number
  image: number
  gradident: number
  smallTitle: number
  smallSubtitle: number
  link: number
  order: number
  isActive: number
  createdAt: number
  updatedAt: number
  linkName: number
  _all: number
}


export type SliderAvgAggregateInputType = {
  id?: true
  order?: true
}

export type SliderSumAggregateInputType = {
  id?: true
  order?: true
}

export type SliderMinAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  image?: true
  gradident?: true
  smallTitle?: true
  smallSubtitle?: true
  link?: true
  order?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  linkName?: true
}

export type SliderMaxAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  image?: true
  gradident?: true
  smallTitle?: true
  smallSubtitle?: true
  link?: true
  order?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  linkName?: true
}

export type SliderCountAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  image?: true
  gradident?: true
  smallTitle?: true
  smallSubtitle?: true
  link?: true
  order?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  linkName?: true
  _all?: true
}

export type SliderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Slider to aggregate.
   */
  where?: Prisma.SliderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sliders to fetch.
   */
  orderBy?: Prisma.SliderOrderByWithRelationInput | Prisma.SliderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SliderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sliders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sliders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Sliders
  **/
  _count?: true | SliderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SliderAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SliderSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SliderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SliderMaxAggregateInputType
}

export type GetSliderAggregateType<T extends SliderAggregateArgs> = {
      [P in keyof T & keyof AggregateSlider]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSlider[P]>
    : Prisma.GetScalarType<T[P], AggregateSlider[P]>
}




export type SliderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SliderWhereInput
  orderBy?: Prisma.SliderOrderByWithAggregationInput | Prisma.SliderOrderByWithAggregationInput[]
  by: Prisma.SliderScalarFieldEnum[] | Prisma.SliderScalarFieldEnum
  having?: Prisma.SliderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SliderCountAggregateInputType | true
  _avg?: SliderAvgAggregateInputType
  _sum?: SliderSumAggregateInputType
  _min?: SliderMinAggregateInputType
  _max?: SliderMaxAggregateInputType
}

export type SliderGroupByOutputType = {
  id: number
  title: string
  subtitle: string
  image: string
  gradident: string
  smallTitle: string
  smallSubtitle: string
  link: string | null
  order: number
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  linkName: string | null
  _count: SliderCountAggregateOutputType | null
  _avg: SliderAvgAggregateOutputType | null
  _sum: SliderSumAggregateOutputType | null
  _min: SliderMinAggregateOutputType | null
  _max: SliderMaxAggregateOutputType | null
}

type GetSliderGroupByPayload<T extends SliderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SliderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SliderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SliderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SliderGroupByOutputType[P]>
      }
    >
  >



export type SliderWhereInput = {
  AND?: Prisma.SliderWhereInput | Prisma.SliderWhereInput[]
  OR?: Prisma.SliderWhereInput[]
  NOT?: Prisma.SliderWhereInput | Prisma.SliderWhereInput[]
  id?: Prisma.IntFilter<"Slider"> | number
  title?: Prisma.StringFilter<"Slider"> | string
  subtitle?: Prisma.StringFilter<"Slider"> | string
  image?: Prisma.StringFilter<"Slider"> | string
  gradident?: Prisma.StringFilter<"Slider"> | string
  smallTitle?: Prisma.StringFilter<"Slider"> | string
  smallSubtitle?: Prisma.StringFilter<"Slider"> | string
  link?: Prisma.StringNullableFilter<"Slider"> | string | null
  order?: Prisma.IntFilter<"Slider"> | number
  isActive?: Prisma.BoolFilter<"Slider"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Slider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Slider"> | Date | string
  linkName?: Prisma.StringNullableFilter<"Slider"> | string | null
}

export type SliderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  image?: Prisma.SortOrder
  gradident?: Prisma.SortOrder
  smallTitle?: Prisma.SortOrder
  smallSubtitle?: Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  linkName?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.SliderOrderByRelevanceInput
}

export type SliderWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SliderWhereInput | Prisma.SliderWhereInput[]
  OR?: Prisma.SliderWhereInput[]
  NOT?: Prisma.SliderWhereInput | Prisma.SliderWhereInput[]
  title?: Prisma.StringFilter<"Slider"> | string
  subtitle?: Prisma.StringFilter<"Slider"> | string
  image?: Prisma.StringFilter<"Slider"> | string
  gradident?: Prisma.StringFilter<"Slider"> | string
  smallTitle?: Prisma.StringFilter<"Slider"> | string
  smallSubtitle?: Prisma.StringFilter<"Slider"> | string
  link?: Prisma.StringNullableFilter<"Slider"> | string | null
  order?: Prisma.IntFilter<"Slider"> | number
  isActive?: Prisma.BoolFilter<"Slider"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Slider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Slider"> | Date | string
  linkName?: Prisma.StringNullableFilter<"Slider"> | string | null
}, "id">

export type SliderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  image?: Prisma.SortOrder
  gradident?: Prisma.SortOrder
  smallTitle?: Prisma.SortOrder
  smallSubtitle?: Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  linkName?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SliderCountOrderByAggregateInput
  _avg?: Prisma.SliderAvgOrderByAggregateInput
  _max?: Prisma.SliderMaxOrderByAggregateInput
  _min?: Prisma.SliderMinOrderByAggregateInput
  _sum?: Prisma.SliderSumOrderByAggregateInput
}

export type SliderScalarWhereWithAggregatesInput = {
  AND?: Prisma.SliderScalarWhereWithAggregatesInput | Prisma.SliderScalarWhereWithAggregatesInput[]
  OR?: Prisma.SliderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SliderScalarWhereWithAggregatesInput | Prisma.SliderScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Slider"> | number
  title?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  subtitle?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  image?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  gradident?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  smallTitle?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  smallSubtitle?: Prisma.StringWithAggregatesFilter<"Slider"> | string
  link?: Prisma.StringNullableWithAggregatesFilter<"Slider"> | string | null
  order?: Prisma.IntWithAggregatesFilter<"Slider"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"Slider"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Slider"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Slider"> | Date | string
  linkName?: Prisma.StringNullableWithAggregatesFilter<"Slider"> | string | null
}

export type SliderCreateInput = {
  title: string
  subtitle: string
  image: string
  gradident: string
  smallTitle: string
  smallSubtitle: string
  link?: string | null
  order?: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  linkName?: string | null
}

export type SliderUncheckedCreateInput = {
  id?: number
  title: string
  subtitle: string
  image: string
  gradident: string
  smallTitle: string
  smallSubtitle: string
  link?: string | null
  order?: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  linkName?: string | null
}

export type SliderUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  gradident?: Prisma.StringFieldUpdateOperationsInput | string
  smallTitle?: Prisma.StringFieldUpdateOperationsInput | string
  smallSubtitle?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  linkName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SliderUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  gradident?: Prisma.StringFieldUpdateOperationsInput | string
  smallTitle?: Prisma.StringFieldUpdateOperationsInput | string
  smallSubtitle?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  linkName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SliderCreateManyInput = {
  id?: number
  title: string
  subtitle: string
  image: string
  gradident: string
  smallTitle: string
  smallSubtitle: string
  link?: string | null
  order?: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  linkName?: string | null
}

export type SliderUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  gradident?: Prisma.StringFieldUpdateOperationsInput | string
  smallTitle?: Prisma.StringFieldUpdateOperationsInput | string
  smallSubtitle?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  linkName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SliderUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.StringFieldUpdateOperationsInput | string
  gradident?: Prisma.StringFieldUpdateOperationsInput | string
  smallTitle?: Prisma.StringFieldUpdateOperationsInput | string
  smallSubtitle?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  linkName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SliderOrderByRelevanceInput = {
  fields: Prisma.SliderOrderByRelevanceFieldEnum | Prisma.SliderOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type SliderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  image?: Prisma.SortOrder
  gradident?: Prisma.SortOrder
  smallTitle?: Prisma.SortOrder
  smallSubtitle?: Prisma.SortOrder
  link?: Prisma.SortOrder
  order?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  linkName?: Prisma.SortOrder
}

export type SliderAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type SliderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  image?: Prisma.SortOrder
  gradident?: Prisma.SortOrder
  smallTitle?: Prisma.SortOrder
  smallSubtitle?: Prisma.SortOrder
  link?: Prisma.SortOrder
  order?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  linkName?: Prisma.SortOrder
}

export type SliderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  image?: Prisma.SortOrder
  gradident?: Prisma.SortOrder
  smallTitle?: Prisma.SortOrder
  smallSubtitle?: Prisma.SortOrder
  link?: Prisma.SortOrder
  order?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  linkName?: Prisma.SortOrder
}

export type SliderSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}



export type SliderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  subtitle?: boolean
  image?: boolean
  gradident?: boolean
  smallTitle?: boolean
  smallSubtitle?: boolean
  link?: boolean
  order?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  linkName?: boolean
}, ExtArgs["result"]["slider"]>



export type SliderSelectScalar = {
  id?: boolean
  title?: boolean
  subtitle?: boolean
  image?: boolean
  gradident?: boolean
  smallTitle?: boolean
  smallSubtitle?: boolean
  link?: boolean
  order?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  linkName?: boolean
}

export type SliderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "subtitle" | "image" | "gradident" | "smallTitle" | "smallSubtitle" | "link" | "order" | "isActive" | "createdAt" | "updatedAt" | "linkName", ExtArgs["result"]["slider"]>

export type $SliderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Slider"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    subtitle: string
    image: string
    gradident: string
    smallTitle: string
    smallSubtitle: string
    link: string | null
    order: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    linkName: string | null
  }, ExtArgs["result"]["slider"]>
  composites: {}
}

export type SliderGetPayload<S extends boolean | null | undefined | SliderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SliderPayload, S>

export type SliderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SliderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SliderCountAggregateInputType | true
  }

export interface SliderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Slider'], meta: { name: 'Slider' } }
  /**
   * Find zero or one Slider that matches the filter.
   * @param {SliderFindUniqueArgs} args - Arguments to find a Slider
   * @example
   * // Get one Slider
   * const slider = await prisma.slider.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SliderFindUniqueArgs>(args: Prisma.SelectSubset<T, SliderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Slider that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SliderFindUniqueOrThrowArgs} args - Arguments to find a Slider
   * @example
   * // Get one Slider
   * const slider = await prisma.slider.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SliderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SliderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Slider that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderFindFirstArgs} args - Arguments to find a Slider
   * @example
   * // Get one Slider
   * const slider = await prisma.slider.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SliderFindFirstArgs>(args?: Prisma.SelectSubset<T, SliderFindFirstArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Slider that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderFindFirstOrThrowArgs} args - Arguments to find a Slider
   * @example
   * // Get one Slider
   * const slider = await prisma.slider.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SliderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SliderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sliders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sliders
   * const sliders = await prisma.slider.findMany()
   * 
   * // Get first 10 Sliders
   * const sliders = await prisma.slider.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sliderWithIdOnly = await prisma.slider.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SliderFindManyArgs>(args?: Prisma.SelectSubset<T, SliderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Slider.
   * @param {SliderCreateArgs} args - Arguments to create a Slider.
   * @example
   * // Create one Slider
   * const Slider = await prisma.slider.create({
   *   data: {
   *     // ... data to create a Slider
   *   }
   * })
   * 
   */
  create<T extends SliderCreateArgs>(args: Prisma.SelectSubset<T, SliderCreateArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sliders.
   * @param {SliderCreateManyArgs} args - Arguments to create many Sliders.
   * @example
   * // Create many Sliders
   * const slider = await prisma.slider.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SliderCreateManyArgs>(args?: Prisma.SelectSubset<T, SliderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Slider.
   * @param {SliderDeleteArgs} args - Arguments to delete one Slider.
   * @example
   * // Delete one Slider
   * const Slider = await prisma.slider.delete({
   *   where: {
   *     // ... filter to delete one Slider
   *   }
   * })
   * 
   */
  delete<T extends SliderDeleteArgs>(args: Prisma.SelectSubset<T, SliderDeleteArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Slider.
   * @param {SliderUpdateArgs} args - Arguments to update one Slider.
   * @example
   * // Update one Slider
   * const slider = await prisma.slider.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SliderUpdateArgs>(args: Prisma.SelectSubset<T, SliderUpdateArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sliders.
   * @param {SliderDeleteManyArgs} args - Arguments to filter Sliders to delete.
   * @example
   * // Delete a few Sliders
   * const { count } = await prisma.slider.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SliderDeleteManyArgs>(args?: Prisma.SelectSubset<T, SliderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sliders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sliders
   * const slider = await prisma.slider.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SliderUpdateManyArgs>(args: Prisma.SelectSubset<T, SliderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Slider.
   * @param {SliderUpsertArgs} args - Arguments to update or create a Slider.
   * @example
   * // Update or create a Slider
   * const slider = await prisma.slider.upsert({
   *   create: {
   *     // ... data to create a Slider
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Slider we want to update
   *   }
   * })
   */
  upsert<T extends SliderUpsertArgs>(args: Prisma.SelectSubset<T, SliderUpsertArgs<ExtArgs>>): Prisma.Prisma__SliderClient<runtime.Types.Result.GetResult<Prisma.$SliderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sliders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderCountArgs} args - Arguments to filter Sliders to count.
   * @example
   * // Count the number of Sliders
   * const count = await prisma.slider.count({
   *   where: {
   *     // ... the filter for the Sliders we want to count
   *   }
   * })
  **/
  count<T extends SliderCountArgs>(
    args?: Prisma.Subset<T, SliderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SliderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Slider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SliderAggregateArgs>(args: Prisma.Subset<T, SliderAggregateArgs>): Prisma.PrismaPromise<GetSliderAggregateType<T>>

  /**
   * Group by Slider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SliderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SliderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SliderGroupByArgs['orderBy'] }
      : { orderBy?: SliderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SliderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSliderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Slider model
 */
readonly fields: SliderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Slider.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SliderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Slider model
 */
export interface SliderFieldRefs {
  readonly id: Prisma.FieldRef<"Slider", 'Int'>
  readonly title: Prisma.FieldRef<"Slider", 'String'>
  readonly subtitle: Prisma.FieldRef<"Slider", 'String'>
  readonly image: Prisma.FieldRef<"Slider", 'String'>
  readonly gradident: Prisma.FieldRef<"Slider", 'String'>
  readonly smallTitle: Prisma.FieldRef<"Slider", 'String'>
  readonly smallSubtitle: Prisma.FieldRef<"Slider", 'String'>
  readonly link: Prisma.FieldRef<"Slider", 'String'>
  readonly order: Prisma.FieldRef<"Slider", 'Int'>
  readonly isActive: Prisma.FieldRef<"Slider", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Slider", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Slider", 'DateTime'>
  readonly linkName: Prisma.FieldRef<"Slider", 'String'>
}
    

// Custom InputTypes
/**
 * Slider findUnique
 */
export type SliderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter, which Slider to fetch.
   */
  where: Prisma.SliderWhereUniqueInput
}

/**
 * Slider findUniqueOrThrow
 */
export type SliderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter, which Slider to fetch.
   */
  where: Prisma.SliderWhereUniqueInput
}

/**
 * Slider findFirst
 */
export type SliderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter, which Slider to fetch.
   */
  where?: Prisma.SliderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sliders to fetch.
   */
  orderBy?: Prisma.SliderOrderByWithRelationInput | Prisma.SliderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sliders.
   */
  cursor?: Prisma.SliderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sliders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sliders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sliders.
   */
  distinct?: Prisma.SliderScalarFieldEnum | Prisma.SliderScalarFieldEnum[]
}

/**
 * Slider findFirstOrThrow
 */
export type SliderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter, which Slider to fetch.
   */
  where?: Prisma.SliderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sliders to fetch.
   */
  orderBy?: Prisma.SliderOrderByWithRelationInput | Prisma.SliderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sliders.
   */
  cursor?: Prisma.SliderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sliders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sliders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sliders.
   */
  distinct?: Prisma.SliderScalarFieldEnum | Prisma.SliderScalarFieldEnum[]
}

/**
 * Slider findMany
 */
export type SliderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter, which Sliders to fetch.
   */
  where?: Prisma.SliderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sliders to fetch.
   */
  orderBy?: Prisma.SliderOrderByWithRelationInput | Prisma.SliderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Sliders.
   */
  cursor?: Prisma.SliderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sliders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sliders.
   */
  skip?: number
  distinct?: Prisma.SliderScalarFieldEnum | Prisma.SliderScalarFieldEnum[]
}

/**
 * Slider create
 */
export type SliderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * The data needed to create a Slider.
   */
  data: Prisma.XOR<Prisma.SliderCreateInput, Prisma.SliderUncheckedCreateInput>
}

/**
 * Slider createMany
 */
export type SliderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Sliders.
   */
  data: Prisma.SliderCreateManyInput | Prisma.SliderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Slider update
 */
export type SliderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * The data needed to update a Slider.
   */
  data: Prisma.XOR<Prisma.SliderUpdateInput, Prisma.SliderUncheckedUpdateInput>
  /**
   * Choose, which Slider to update.
   */
  where: Prisma.SliderWhereUniqueInput
}

/**
 * Slider updateMany
 */
export type SliderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Sliders.
   */
  data: Prisma.XOR<Prisma.SliderUpdateManyMutationInput, Prisma.SliderUncheckedUpdateManyInput>
  /**
   * Filter which Sliders to update
   */
  where?: Prisma.SliderWhereInput
  /**
   * Limit how many Sliders to update.
   */
  limit?: number
}

/**
 * Slider upsert
 */
export type SliderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * The filter to search for the Slider to update in case it exists.
   */
  where: Prisma.SliderWhereUniqueInput
  /**
   * In case the Slider found by the `where` argument doesn't exist, create a new Slider with this data.
   */
  create: Prisma.XOR<Prisma.SliderCreateInput, Prisma.SliderUncheckedCreateInput>
  /**
   * In case the Slider was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SliderUpdateInput, Prisma.SliderUncheckedUpdateInput>
}

/**
 * Slider delete
 */
export type SliderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
  /**
   * Filter which Slider to delete.
   */
  where: Prisma.SliderWhereUniqueInput
}

/**
 * Slider deleteMany
 */
export type SliderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sliders to delete
   */
  where?: Prisma.SliderWhereInput
  /**
   * Limit how many Sliders to delete.
   */
  limit?: number
}

/**
 * Slider without action
 */
export type SliderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Slider
   */
  select?: Prisma.SliderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Slider
   */
  omit?: Prisma.SliderOmit<ExtArgs> | null
}
