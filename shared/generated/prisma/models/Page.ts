
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Page` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as prisma from "../internal/prismaNamespace.js"

/**
 * Model Page
 * 
 */
export type PageModel = runtime.Types.Result.DefaultSelection<Prisma.$PagePayload>

export type AggregatePage = {
  _count: PageCountAggregateOutputType | null
  _avg: PageAvgAggregateOutputType | null
  _sum: PageSumAggregateOutputType | null
  _min: PageMinAggregateOutputType | null
  _max: PageMaxAggregateOutputType | null
}

export type PageAvgAggregateOutputType = {
  id: number | null
}

export type PageSumAggregateOutputType = {
  id: number | null
}

export type PageMinAggregateOutputType = {
  id: number | null
  title: string | null
  slug: string | null
  content: string | null
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PageMaxAggregateOutputType = {
  id: number | null
  title: string | null
  slug: string | null
  content: string | null
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PageCountAggregateOutputType = {
  id: number
  title: number
  slug: number
  content: number
  metaTitle: number
  metaDescription: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PageAvgAggregateInputType = {
  id?: true
}

export type PageSumAggregateInputType = {
  id?: true
}

export type PageMinAggregateInputType = {
  id?: true
  title?: true
  slug?: true
  content?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
}

export type PageMaxAggregateInputType = {
  id?: true
  title?: true
  slug?: true
  content?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
}

export type PageCountAggregateInputType = {
  id?: true
  title?: true
  slug?: true
  content?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Page to aggregate.
   */
  where?: Prisma.PageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pages to fetch.
   */
  orderBy?: Prisma.PageOrderByWithRelationInput | Prisma.PageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Pages
  **/
  _count?: true | PageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PageMaxAggregateInputType
}

export type GetPageAggregateType<T extends PageAggregateArgs> = {
      [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePage[P]>
    : Prisma.GetScalarType<T[P], AggregatePage[P]>
}




export type PageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PageWhereInput
  orderBy?: Prisma.PageOrderByWithAggregationInput | Prisma.PageOrderByWithAggregationInput[]
  by: Prisma.PageScalarFieldEnum[] | Prisma.PageScalarFieldEnum
  having?: Prisma.PageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PageCountAggregateInputType | true
  _avg?: PageAvgAggregateInputType
  _sum?: PageSumAggregateInputType
  _min?: PageMinAggregateInputType
  _max?: PageMaxAggregateInputType
}

export type PageGroupByOutputType = {
  id: number
  title: string
  slug: string
  content: string
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date
  updatedAt: Date
  _count: PageCountAggregateOutputType | null
  _avg: PageAvgAggregateOutputType | null
  _sum: PageSumAggregateOutputType | null
  _min: PageMinAggregateOutputType | null
  _max: PageMaxAggregateOutputType | null
}

type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PageGroupByOutputType[P]>
      }
    >
  >



export type PageWhereInput = {
  AND?: Prisma.PageWhereInput | Prisma.PageWhereInput[]
  OR?: Prisma.PageWhereInput[]
  NOT?: Prisma.PageWhereInput | Prisma.PageWhereInput[]
  id?: Prisma.IntFilter<"Page"> | number
  title?: Prisma.StringFilter<"Page"> | string
  slug?: Prisma.StringFilter<"Page"> | string
  content?: Prisma.StringFilter<"Page"> | string
  metaTitle?: Prisma.StringNullableFilter<"Page"> | string | null
  metaDescription?: Prisma.StringNullableFilter<"Page"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Page"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Page"> | Date | string
}

export type PageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  metaDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.PageOrderByRelevanceInput
}

export type PageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  slug?: string
  AND?: Prisma.PageWhereInput | Prisma.PageWhereInput[]
  OR?: Prisma.PageWhereInput[]
  NOT?: Prisma.PageWhereInput | Prisma.PageWhereInput[]
  title?: Prisma.StringFilter<"Page"> | string
  content?: Prisma.StringFilter<"Page"> | string
  metaTitle?: Prisma.StringNullableFilter<"Page"> | string | null
  metaDescription?: Prisma.StringNullableFilter<"Page"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Page"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Page"> | Date | string
}, "id" | "slug">

export type PageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  metaDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PageCountOrderByAggregateInput
  _avg?: Prisma.PageAvgOrderByAggregateInput
  _max?: Prisma.PageMaxOrderByAggregateInput
  _min?: Prisma.PageMinOrderByAggregateInput
  _sum?: Prisma.PageSumOrderByAggregateInput
}

export type PageScalarWhereWithAggregatesInput = {
  AND?: Prisma.PageScalarWhereWithAggregatesInput | Prisma.PageScalarWhereWithAggregatesInput[]
  OR?: Prisma.PageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PageScalarWhereWithAggregatesInput | Prisma.PageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Page"> | number
  title?: Prisma.StringWithAggregatesFilter<"Page"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Page"> | string
  content?: Prisma.StringWithAggregatesFilter<"Page"> | string
  metaTitle?: Prisma.StringNullableWithAggregatesFilter<"Page"> | string | null
  metaDescription?: Prisma.StringNullableWithAggregatesFilter<"Page"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Page"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Page"> | Date | string
}

export type PageCreateInput = {
  title: string
  slug: string
  content: string
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PageUncheckedCreateInput = {
  id?: number
  title: string
  slug: string
  content: string
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PageUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PageCreateManyInput = {
  id?: number
  title: string
  slug: string
  content: string
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PageUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PageOrderByRelevanceInput = {
  fields: Prisma.PageOrderByRelevanceFieldEnum | Prisma.PageOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type PageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  slug?: boolean
  content?: boolean
  metaTitle?: boolean
  metaDescription?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["page"]>



export type PageSelectScalar = {
  id?: boolean
  title?: boolean
  slug?: boolean
  content?: boolean
  metaTitle?: boolean
  metaDescription?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "slug" | "content" | "metaTitle" | "metaDescription" | "createdAt" | "updatedAt", ExtArgs["result"]["page"]>

export type $PagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Page"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    slug: string
    content: string
    metaTitle: string | null
    metaDescription: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["page"]>
  composites: {}
}

export type PageGetPayload<S extends boolean | null | undefined | PageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PagePayload, S>

export type PageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PageCountAggregateInputType | true
  }

export interface PageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
  /**
   * Find zero or one Page that matches the filter.
   * @param {PageFindUniqueArgs} args - Arguments to find a Page
   * @example
   * // Get one Page
   * const page = await prisma.page.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PageFindUniqueArgs>(args: Prisma.SelectSubset<T, PageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Page that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
   * @example
   * // Get one Page
   * const page = await prisma.page.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Page that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageFindFirstArgs} args - Arguments to find a Page
   * @example
   * // Get one Page
   * const page = await prisma.page.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PageFindFirstArgs>(args?: Prisma.SelectSubset<T, PageFindFirstArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Page that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
   * @example
   * // Get one Page
   * const page = await prisma.page.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pages
   * const pages = await prisma.page.findMany()
   * 
   * // Get first 10 Pages
   * const pages = await prisma.page.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pageWithIdOnly = await prisma.page.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PageFindManyArgs>(args?: Prisma.SelectSubset<T, PageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Page.
   * @param {PageCreateArgs} args - Arguments to create a Page.
   * @example
   * // Create one Page
   * const Page = await prisma.page.create({
   *   data: {
   *     // ... data to create a Page
   *   }
   * })
   * 
   */
  create<T extends PageCreateArgs>(args: Prisma.SelectSubset<T, PageCreateArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Pages.
   * @param {PageCreateManyArgs} args - Arguments to create many Pages.
   * @example
   * // Create many Pages
   * const page = await prisma.page.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PageCreateManyArgs>(args?: Prisma.SelectSubset<T, PageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Page.
   * @param {PageDeleteArgs} args - Arguments to delete one Page.
   * @example
   * // Delete one Page
   * const Page = await prisma.page.delete({
   *   where: {
   *     // ... filter to delete one Page
   *   }
   * })
   * 
   */
  delete<T extends PageDeleteArgs>(args: Prisma.SelectSubset<T, PageDeleteArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Page.
   * @param {PageUpdateArgs} args - Arguments to update one Page.
   * @example
   * // Update one Page
   * const page = await prisma.page.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PageUpdateArgs>(args: Prisma.SelectSubset<T, PageUpdateArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Pages.
   * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
   * @example
   * // Delete a few Pages
   * const { count } = await prisma.page.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PageDeleteManyArgs>(args?: Prisma.SelectSubset<T, PageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pages
   * const page = await prisma.page.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PageUpdateManyArgs>(args: Prisma.SelectSubset<T, PageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Page.
   * @param {PageUpsertArgs} args - Arguments to update or create a Page.
   * @example
   * // Update or create a Page
   * const page = await prisma.page.upsert({
   *   create: {
   *     // ... data to create a Page
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Page we want to update
   *   }
   * })
   */
  upsert<T extends PageUpsertArgs>(args: Prisma.SelectSubset<T, PageUpsertArgs<ExtArgs>>): Prisma.Prisma__PageClient<runtime.Types.Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Pages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageCountArgs} args - Arguments to filter Pages to count.
   * @example
   * // Count the number of Pages
   * const count = await prisma.page.count({
   *   where: {
   *     // ... the filter for the Pages we want to count
   *   }
   * })
  **/
  count<T extends PageCountArgs>(
    args?: Prisma.Subset<T, PageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Page.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PageAggregateArgs>(args: Prisma.Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

  /**
   * Group by Page.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PageGroupByArgs['orderBy'] }
      : { orderBy?: PageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Page model
 */
readonly fields: PageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Page.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Page model
 */
export interface PageFieldRefs {
  readonly id: Prisma.FieldRef<"Page", 'Int'>
  readonly title: Prisma.FieldRef<"Page", 'String'>
  readonly slug: Prisma.FieldRef<"Page", 'String'>
  readonly content: Prisma.FieldRef<"Page", 'String'>
  readonly metaTitle: Prisma.FieldRef<"Page", 'String'>
  readonly metaDescription: Prisma.FieldRef<"Page", 'String'>
  readonly createdAt: Prisma.FieldRef<"Page", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Page", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Page findUnique
 */
export type PageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter, which Page to fetch.
   */
  where: Prisma.PageWhereUniqueInput
}

/**
 * Page findUniqueOrThrow
 */
export type PageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter, which Page to fetch.
   */
  where: Prisma.PageWhereUniqueInput
}

/**
 * Page findFirst
 */
export type PageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter, which Page to fetch.
   */
  where?: Prisma.PageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pages to fetch.
   */
  orderBy?: Prisma.PageOrderByWithRelationInput | Prisma.PageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pages.
   */
  cursor?: Prisma.PageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pages.
   */
  distinct?: Prisma.PageScalarFieldEnum | Prisma.PageScalarFieldEnum[]
}

/**
 * Page findFirstOrThrow
 */
export type PageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter, which Page to fetch.
   */
  where?: Prisma.PageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pages to fetch.
   */
  orderBy?: Prisma.PageOrderByWithRelationInput | Prisma.PageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pages.
   */
  cursor?: Prisma.PageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pages.
   */
  distinct?: Prisma.PageScalarFieldEnum | Prisma.PageScalarFieldEnum[]
}

/**
 * Page findMany
 */
export type PageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter, which Pages to fetch.
   */
  where?: Prisma.PageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pages to fetch.
   */
  orderBy?: Prisma.PageOrderByWithRelationInput | Prisma.PageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Pages.
   */
  cursor?: Prisma.PageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pages.
   */
  skip?: number
  distinct?: Prisma.PageScalarFieldEnum | Prisma.PageScalarFieldEnum[]
}

/**
 * Page create
 */
export type PageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * The data needed to create a Page.
   */
  data: Prisma.XOR<Prisma.PageCreateInput, Prisma.PageUncheckedCreateInput>
}

/**
 * Page createMany
 */
export type PageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Pages.
   */
  data: Prisma.PageCreateManyInput | Prisma.PageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Page update
 */
export type PageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * The data needed to update a Page.
   */
  data: Prisma.XOR<Prisma.PageUpdateInput, Prisma.PageUncheckedUpdateInput>
  /**
   * Choose, which Page to update.
   */
  where: Prisma.PageWhereUniqueInput
}

/**
 * Page updateMany
 */
export type PageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Pages.
   */
  data: Prisma.XOR<Prisma.PageUpdateManyMutationInput, Prisma.PageUncheckedUpdateManyInput>
  /**
   * Filter which Pages to update
   */
  where?: Prisma.PageWhereInput
  /**
   * Limit how many Pages to update.
   */
  limit?: number
}

/**
 * Page upsert
 */
export type PageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * The filter to search for the Page to update in case it exists.
   */
  where: Prisma.PageWhereUniqueInput
  /**
   * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
   */
  create: Prisma.XOR<Prisma.PageCreateInput, Prisma.PageUncheckedCreateInput>
  /**
   * In case the Page was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PageUpdateInput, Prisma.PageUncheckedUpdateInput>
}

/**
 * Page delete
 */
export type PageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
  /**
   * Filter which Page to delete.
   */
  where: Prisma.PageWhereUniqueInput
}

/**
 * Page deleteMany
 */
export type PageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pages to delete
   */
  where?: Prisma.PageWhereInput
  /**
   * Limit how many Pages to delete.
   */
  limit?: number
}

/**
 * Page without action
 */
export type PageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Page
   */
  select?: Prisma.PageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Page
   */
  omit?: Prisma.PageOmit<ExtArgs> | null
}
