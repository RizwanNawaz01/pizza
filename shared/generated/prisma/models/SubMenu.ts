
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SubMenu` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as prisma from "../internal/prismaNamespace.js"

/**
 * Model SubMenu
 * 
 */
export type SubMenuModel = runtime.Types.Result.DefaultSelection<Prisma.$SubMenuPayload>

export type AggregateSubMenu = {
  _count: SubMenuCountAggregateOutputType | null
  _avg: SubMenuAvgAggregateOutputType | null
  _sum: SubMenuSumAggregateOutputType | null
  _min: SubMenuMinAggregateOutputType | null
  _max: SubMenuMaxAggregateOutputType | null
}

export type SubMenuAvgAggregateOutputType = {
  id: number | null
  price: number | null
}

export type SubMenuSumAggregateOutputType = {
  id: number | null
  price: number | null
}

export type SubMenuMinAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  price: number | null
}

export type SubMenuMaxAggregateOutputType = {
  id: number | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  price: number | null
}

export type SubMenuCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  price: number
  _all: number
}


export type SubMenuAvgAggregateInputType = {
  id?: true
  price?: true
}

export type SubMenuSumAggregateInputType = {
  id?: true
  price?: true
}

export type SubMenuMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  price?: true
}

export type SubMenuMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  price?: true
}

export type SubMenuCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  price?: true
  _all?: true
}

export type SubMenuAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubMenu to aggregate.
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubMenus to fetch.
   */
  orderBy?: Prisma.SubMenuOrderByWithRelationInput | Prisma.SubMenuOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubMenuWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubMenus from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubMenus.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SubMenus
  **/
  _count?: true | SubMenuCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SubMenuAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SubMenuSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubMenuMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubMenuMaxAggregateInputType
}

export type GetSubMenuAggregateType<T extends SubMenuAggregateArgs> = {
      [P in keyof T & keyof AggregateSubMenu]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubMenu[P]>
    : Prisma.GetScalarType<T[P], AggregateSubMenu[P]>
}




export type SubMenuGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubMenuWhereInput
  orderBy?: Prisma.SubMenuOrderByWithAggregationInput | Prisma.SubMenuOrderByWithAggregationInput[]
  by: Prisma.SubMenuScalarFieldEnum[] | Prisma.SubMenuScalarFieldEnum
  having?: Prisma.SubMenuScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubMenuCountAggregateInputType | true
  _avg?: SubMenuAvgAggregateInputType
  _sum?: SubMenuSumAggregateInputType
  _min?: SubMenuMinAggregateInputType
  _max?: SubMenuMaxAggregateInputType
}

export type SubMenuGroupByOutputType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
  price: number
  _count: SubMenuCountAggregateOutputType | null
  _avg: SubMenuAvgAggregateOutputType | null
  _sum: SubMenuSumAggregateOutputType | null
  _min: SubMenuMinAggregateOutputType | null
  _max: SubMenuMaxAggregateOutputType | null
}

type GetSubMenuGroupByPayload<T extends SubMenuGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubMenuGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubMenuGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubMenuGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubMenuGroupByOutputType[P]>
      }
    >
  >



export type SubMenuWhereInput = {
  AND?: Prisma.SubMenuWhereInput | Prisma.SubMenuWhereInput[]
  OR?: Prisma.SubMenuWhereInput[]
  NOT?: Prisma.SubMenuWhereInput | Prisma.SubMenuWhereInput[]
  id?: Prisma.IntFilter<"SubMenu"> | number
  name?: Prisma.StringFilter<"SubMenu"> | string
  createdAt?: Prisma.DateTimeFilter<"SubMenu"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SubMenu"> | Date | string
  price?: Prisma.FloatFilter<"SubMenu"> | number
}

export type SubMenuOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  price?: Prisma.SortOrder
  _relevance?: Prisma.SubMenuOrderByRelevanceInput
}

export type SubMenuWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.SubMenuWhereInput | Prisma.SubMenuWhereInput[]
  OR?: Prisma.SubMenuWhereInput[]
  NOT?: Prisma.SubMenuWhereInput | Prisma.SubMenuWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"SubMenu"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SubMenu"> | Date | string
  price?: Prisma.FloatFilter<"SubMenu"> | number
}, "id" | "name">

export type SubMenuOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  price?: Prisma.SortOrder
  _count?: Prisma.SubMenuCountOrderByAggregateInput
  _avg?: Prisma.SubMenuAvgOrderByAggregateInput
  _max?: Prisma.SubMenuMaxOrderByAggregateInput
  _min?: Prisma.SubMenuMinOrderByAggregateInput
  _sum?: Prisma.SubMenuSumOrderByAggregateInput
}

export type SubMenuScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubMenuScalarWhereWithAggregatesInput | Prisma.SubMenuScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubMenuScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubMenuScalarWhereWithAggregatesInput | Prisma.SubMenuScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"SubMenu"> | number
  name?: Prisma.StringWithAggregatesFilter<"SubMenu"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SubMenu"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SubMenu"> | Date | string
  price?: Prisma.FloatWithAggregatesFilter<"SubMenu"> | number
}

export type SubMenuCreateInput = {
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  price?: number
}

export type SubMenuUncheckedCreateInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  price?: number
}

export type SubMenuUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type SubMenuUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type SubMenuCreateManyInput = {
  id?: number
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  price?: number
}

export type SubMenuUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type SubMenuUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type SubMenuOrderByRelevanceInput = {
  fields: Prisma.SubMenuOrderByRelevanceFieldEnum | Prisma.SubMenuOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type SubMenuCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SubMenuAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SubMenuMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SubMenuMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SubMenuSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}



export type SubMenuSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  price?: boolean
}, ExtArgs["result"]["subMenu"]>



export type SubMenuSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  price?: boolean
}

export type SubMenuOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "price", ExtArgs["result"]["subMenu"]>

export type $SubMenuPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SubMenu"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    price: number
  }, ExtArgs["result"]["subMenu"]>
  composites: {}
}

export type SubMenuGetPayload<S extends boolean | null | undefined | SubMenuDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubMenuPayload, S>

export type SubMenuCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubMenuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubMenuCountAggregateInputType | true
  }

export interface SubMenuDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubMenu'], meta: { name: 'SubMenu' } }
  /**
   * Find zero or one SubMenu that matches the filter.
   * @param {SubMenuFindUniqueArgs} args - Arguments to find a SubMenu
   * @example
   * // Get one SubMenu
   * const subMenu = await prisma.subMenu.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubMenuFindUniqueArgs>(args: Prisma.SelectSubset<T, SubMenuFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SubMenu that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubMenuFindUniqueOrThrowArgs} args - Arguments to find a SubMenu
   * @example
   * // Get one SubMenu
   * const subMenu = await prisma.subMenu.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubMenuFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubMenu that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuFindFirstArgs} args - Arguments to find a SubMenu
   * @example
   * // Get one SubMenu
   * const subMenu = await prisma.subMenu.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubMenuFindFirstArgs>(args?: Prisma.SelectSubset<T, SubMenuFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SubMenu that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuFindFirstOrThrowArgs} args - Arguments to find a SubMenu
   * @example
   * // Get one SubMenu
   * const subMenu = await prisma.subMenu.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubMenuFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SubMenus that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SubMenus
   * const subMenus = await prisma.subMenu.findMany()
   * 
   * // Get first 10 SubMenus
   * const subMenus = await prisma.subMenu.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const subMenuWithIdOnly = await prisma.subMenu.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubMenuFindManyArgs>(args?: Prisma.SelectSubset<T, SubMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SubMenu.
   * @param {SubMenuCreateArgs} args - Arguments to create a SubMenu.
   * @example
   * // Create one SubMenu
   * const SubMenu = await prisma.subMenu.create({
   *   data: {
   *     // ... data to create a SubMenu
   *   }
   * })
   * 
   */
  create<T extends SubMenuCreateArgs>(args: Prisma.SelectSubset<T, SubMenuCreateArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SubMenus.
   * @param {SubMenuCreateManyArgs} args - Arguments to create many SubMenus.
   * @example
   * // Create many SubMenus
   * const subMenu = await prisma.subMenu.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubMenuCreateManyArgs>(args?: Prisma.SelectSubset<T, SubMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a SubMenu.
   * @param {SubMenuDeleteArgs} args - Arguments to delete one SubMenu.
   * @example
   * // Delete one SubMenu
   * const SubMenu = await prisma.subMenu.delete({
   *   where: {
   *     // ... filter to delete one SubMenu
   *   }
   * })
   * 
   */
  delete<T extends SubMenuDeleteArgs>(args: Prisma.SelectSubset<T, SubMenuDeleteArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SubMenu.
   * @param {SubMenuUpdateArgs} args - Arguments to update one SubMenu.
   * @example
   * // Update one SubMenu
   * const subMenu = await prisma.subMenu.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubMenuUpdateArgs>(args: Prisma.SelectSubset<T, SubMenuUpdateArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SubMenus.
   * @param {SubMenuDeleteManyArgs} args - Arguments to filter SubMenus to delete.
   * @example
   * // Delete a few SubMenus
   * const { count } = await prisma.subMenu.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubMenuDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SubMenus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SubMenus
   * const subMenu = await prisma.subMenu.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubMenuUpdateManyArgs>(args: Prisma.SelectSubset<T, SubMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one SubMenu.
   * @param {SubMenuUpsertArgs} args - Arguments to update or create a SubMenu.
   * @example
   * // Update or create a SubMenu
   * const subMenu = await prisma.subMenu.upsert({
   *   create: {
   *     // ... data to create a SubMenu
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SubMenu we want to update
   *   }
   * })
   */
  upsert<T extends SubMenuUpsertArgs>(args: Prisma.SelectSubset<T, SubMenuUpsertArgs<ExtArgs>>): Prisma.Prisma__SubMenuClient<runtime.Types.Result.GetResult<Prisma.$SubMenuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SubMenus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuCountArgs} args - Arguments to filter SubMenus to count.
   * @example
   * // Count the number of SubMenus
   * const count = await prisma.subMenu.count({
   *   where: {
   *     // ... the filter for the SubMenus we want to count
   *   }
   * })
  **/
  count<T extends SubMenuCountArgs>(
    args?: Prisma.Subset<T, SubMenuCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubMenuCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SubMenu.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubMenuAggregateArgs>(args: Prisma.Subset<T, SubMenuAggregateArgs>): Prisma.PrismaPromise<GetSubMenuAggregateType<T>>

  /**
   * Group by SubMenu.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubMenuGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubMenuGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubMenuGroupByArgs['orderBy'] }
      : { orderBy?: SubMenuGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SubMenu model
 */
readonly fields: SubMenuFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SubMenu.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubMenuClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SubMenu model
 */
export interface SubMenuFieldRefs {
  readonly id: Prisma.FieldRef<"SubMenu", 'Int'>
  readonly name: Prisma.FieldRef<"SubMenu", 'String'>
  readonly createdAt: Prisma.FieldRef<"SubMenu", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SubMenu", 'DateTime'>
  readonly price: Prisma.FieldRef<"SubMenu", 'Float'>
}
    

// Custom InputTypes
/**
 * SubMenu findUnique
 */
export type SubMenuFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter, which SubMenu to fetch.
   */
  where: Prisma.SubMenuWhereUniqueInput
}

/**
 * SubMenu findUniqueOrThrow
 */
export type SubMenuFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter, which SubMenu to fetch.
   */
  where: Prisma.SubMenuWhereUniqueInput
}

/**
 * SubMenu findFirst
 */
export type SubMenuFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter, which SubMenu to fetch.
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubMenus to fetch.
   */
  orderBy?: Prisma.SubMenuOrderByWithRelationInput | Prisma.SubMenuOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubMenus.
   */
  cursor?: Prisma.SubMenuWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubMenus from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubMenus.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubMenus.
   */
  distinct?: Prisma.SubMenuScalarFieldEnum | Prisma.SubMenuScalarFieldEnum[]
}

/**
 * SubMenu findFirstOrThrow
 */
export type SubMenuFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter, which SubMenu to fetch.
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubMenus to fetch.
   */
  orderBy?: Prisma.SubMenuOrderByWithRelationInput | Prisma.SubMenuOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SubMenus.
   */
  cursor?: Prisma.SubMenuWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubMenus from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubMenus.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SubMenus.
   */
  distinct?: Prisma.SubMenuScalarFieldEnum | Prisma.SubMenuScalarFieldEnum[]
}

/**
 * SubMenu findMany
 */
export type SubMenuFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter, which SubMenus to fetch.
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SubMenus to fetch.
   */
  orderBy?: Prisma.SubMenuOrderByWithRelationInput | Prisma.SubMenuOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SubMenus.
   */
  cursor?: Prisma.SubMenuWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SubMenus from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SubMenus.
   */
  skip?: number
  distinct?: Prisma.SubMenuScalarFieldEnum | Prisma.SubMenuScalarFieldEnum[]
}

/**
 * SubMenu create
 */
export type SubMenuCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * The data needed to create a SubMenu.
   */
  data: Prisma.XOR<Prisma.SubMenuCreateInput, Prisma.SubMenuUncheckedCreateInput>
}

/**
 * SubMenu createMany
 */
export type SubMenuCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SubMenus.
   */
  data: Prisma.SubMenuCreateManyInput | Prisma.SubMenuCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SubMenu update
 */
export type SubMenuUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * The data needed to update a SubMenu.
   */
  data: Prisma.XOR<Prisma.SubMenuUpdateInput, Prisma.SubMenuUncheckedUpdateInput>
  /**
   * Choose, which SubMenu to update.
   */
  where: Prisma.SubMenuWhereUniqueInput
}

/**
 * SubMenu updateMany
 */
export type SubMenuUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SubMenus.
   */
  data: Prisma.XOR<Prisma.SubMenuUpdateManyMutationInput, Prisma.SubMenuUncheckedUpdateManyInput>
  /**
   * Filter which SubMenus to update
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * Limit how many SubMenus to update.
   */
  limit?: number
}

/**
 * SubMenu upsert
 */
export type SubMenuUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * The filter to search for the SubMenu to update in case it exists.
   */
  where: Prisma.SubMenuWhereUniqueInput
  /**
   * In case the SubMenu found by the `where` argument doesn't exist, create a new SubMenu with this data.
   */
  create: Prisma.XOR<Prisma.SubMenuCreateInput, Prisma.SubMenuUncheckedCreateInput>
  /**
   * In case the SubMenu was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubMenuUpdateInput, Prisma.SubMenuUncheckedUpdateInput>
}

/**
 * SubMenu delete
 */
export type SubMenuDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
  /**
   * Filter which SubMenu to delete.
   */
  where: Prisma.SubMenuWhereUniqueInput
}

/**
 * SubMenu deleteMany
 */
export type SubMenuDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SubMenus to delete
   */
  where?: Prisma.SubMenuWhereInput
  /**
   * Limit how many SubMenus to delete.
   */
  limit?: number
}

/**
 * SubMenu without action
 */
export type SubMenuDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubMenu
   */
  select?: Prisma.SubMenuSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SubMenu
   */
  omit?: Prisma.SubMenuOmit<ExtArgs> | null
}
