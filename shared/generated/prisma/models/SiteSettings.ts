
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SiteSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as prisma from "../internal/prismaNamespace.js"

/**
 * Model SiteSettings
 * 
 */
export type SiteSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$SiteSettingsPayload>

export type AggregateSiteSettings = {
  _count: SiteSettingsCountAggregateOutputType | null
  _avg: SiteSettingsAvgAggregateOutputType | null
  _sum: SiteSettingsSumAggregateOutputType | null
  _min: SiteSettingsMinAggregateOutputType | null
  _max: SiteSettingsMaxAggregateOutputType | null
}

export type SiteSettingsAvgAggregateOutputType = {
  id: number | null
  minOrder: number | null
}

export type SiteSettingsSumAggregateOutputType = {
  id: number | null
  minOrder: number | null
}

export type SiteSettingsMinAggregateOutputType = {
  id: number | null
  address: string | null
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date | null
  updatedAt: Date | null
  contact: string | null
  description: string | null
  favicon: string | null
  logo: string | null
  minOrder: number | null
  siteName: string | null
  title: string | null
  currency: string | null
  order_outside_time: string | null
}

export type SiteSettingsMaxAggregateOutputType = {
  id: number | null
  address: string | null
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date | null
  updatedAt: Date | null
  contact: string | null
  description: string | null
  favicon: string | null
  logo: string | null
  minOrder: number | null
  siteName: string | null
  title: string | null
  currency: string | null
  order_outside_time: string | null
}

export type SiteSettingsCountAggregateOutputType = {
  id: number
  address: number
  metaTitle: number
  metaDescription: number
  createdAt: number
  updatedAt: number
  contact: number
  description: number
  favicon: number
  logo: number
  minOrder: number
  openingHours: number
  services: number
  siteName: number
  title: number
  currency: number
  order_outside_time: number
  _all: number
}


export type SiteSettingsAvgAggregateInputType = {
  id?: true
  minOrder?: true
}

export type SiteSettingsSumAggregateInputType = {
  id?: true
  minOrder?: true
}

export type SiteSettingsMinAggregateInputType = {
  id?: true
  address?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
  contact?: true
  description?: true
  favicon?: true
  logo?: true
  minOrder?: true
  siteName?: true
  title?: true
  currency?: true
  order_outside_time?: true
}

export type SiteSettingsMaxAggregateInputType = {
  id?: true
  address?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
  contact?: true
  description?: true
  favicon?: true
  logo?: true
  minOrder?: true
  siteName?: true
  title?: true
  currency?: true
  order_outside_time?: true
}

export type SiteSettingsCountAggregateInputType = {
  id?: true
  address?: true
  metaTitle?: true
  metaDescription?: true
  createdAt?: true
  updatedAt?: true
  contact?: true
  description?: true
  favicon?: true
  logo?: true
  minOrder?: true
  openingHours?: true
  services?: true
  siteName?: true
  title?: true
  currency?: true
  order_outside_time?: true
  _all?: true
}

export type SiteSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SiteSettings to aggregate.
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SiteSettings to fetch.
   */
  orderBy?: Prisma.SiteSettingsOrderByWithRelationInput | Prisma.SiteSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SiteSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SiteSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SiteSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SiteSettings
  **/
  _count?: true | SiteSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SiteSettingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SiteSettingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SiteSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SiteSettingsMaxAggregateInputType
}

export type GetSiteSettingsAggregateType<T extends SiteSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateSiteSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSiteSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateSiteSettings[P]>
}




export type SiteSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SiteSettingsWhereInput
  orderBy?: Prisma.SiteSettingsOrderByWithAggregationInput | Prisma.SiteSettingsOrderByWithAggregationInput[]
  by: Prisma.SiteSettingsScalarFieldEnum[] | Prisma.SiteSettingsScalarFieldEnum
  having?: Prisma.SiteSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SiteSettingsCountAggregateInputType | true
  _avg?: SiteSettingsAvgAggregateInputType
  _sum?: SiteSettingsSumAggregateInputType
  _min?: SiteSettingsMinAggregateInputType
  _max?: SiteSettingsMaxAggregateInputType
}

export type SiteSettingsGroupByOutputType = {
  id: number
  address: string | null
  metaTitle: string | null
  metaDescription: string | null
  createdAt: Date
  updatedAt: Date
  contact: string | null
  description: string | null
  favicon: string | null
  logo: string | null
  minOrder: number | null
  openingHours: runtime.JsonValue | null
  services: runtime.JsonValue | null
  siteName: string | null
  title: string | null
  currency: string | null
  order_outside_time: string | null
  _count: SiteSettingsCountAggregateOutputType | null
  _avg: SiteSettingsAvgAggregateOutputType | null
  _sum: SiteSettingsSumAggregateOutputType | null
  _min: SiteSettingsMinAggregateOutputType | null
  _max: SiteSettingsMaxAggregateOutputType | null
}

type GetSiteSettingsGroupByPayload<T extends SiteSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SiteSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SiteSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SiteSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SiteSettingsGroupByOutputType[P]>
      }
    >
  >



export type SiteSettingsWhereInput = {
  AND?: Prisma.SiteSettingsWhereInput | Prisma.SiteSettingsWhereInput[]
  OR?: Prisma.SiteSettingsWhereInput[]
  NOT?: Prisma.SiteSettingsWhereInput | Prisma.SiteSettingsWhereInput[]
  id?: Prisma.IntFilter<"SiteSettings"> | number
  address?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  metaTitle?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  metaDescription?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SiteSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SiteSettings"> | Date | string
  contact?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  description?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  favicon?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  logo?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  minOrder?: Prisma.FloatNullableFilter<"SiteSettings"> | number | null
  openingHours?: Prisma.JsonNullableFilter<"SiteSettings">
  services?: Prisma.JsonNullableFilter<"SiteSettings">
  siteName?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  title?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  currency?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  order_outside_time?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
}

export type SiteSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  metaTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  metaDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  favicon?: Prisma.SortOrderInput | Prisma.SortOrder
  logo?: Prisma.SortOrderInput | Prisma.SortOrder
  minOrder?: Prisma.SortOrderInput | Prisma.SortOrder
  openingHours?: Prisma.SortOrderInput | Prisma.SortOrder
  services?: Prisma.SortOrderInput | Prisma.SortOrder
  siteName?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  currency?: Prisma.SortOrderInput | Prisma.SortOrder
  order_outside_time?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.SiteSettingsOrderByRelevanceInput
}

export type SiteSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SiteSettingsWhereInput | Prisma.SiteSettingsWhereInput[]
  OR?: Prisma.SiteSettingsWhereInput[]
  NOT?: Prisma.SiteSettingsWhereInput | Prisma.SiteSettingsWhereInput[]
  address?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  metaTitle?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  metaDescription?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SiteSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SiteSettings"> | Date | string
  contact?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  description?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  favicon?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  logo?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  minOrder?: Prisma.FloatNullableFilter<"SiteSettings"> | number | null
  openingHours?: Prisma.JsonNullableFilter<"SiteSettings">
  services?: Prisma.JsonNullableFilter<"SiteSettings">
  siteName?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  title?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  currency?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
  order_outside_time?: Prisma.StringNullableFilter<"SiteSettings"> | string | null
}, "id">

export type SiteSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  metaTitle?: Prisma.SortOrderInput | Prisma.SortOrder
  metaDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  favicon?: Prisma.SortOrderInput | Prisma.SortOrder
  logo?: Prisma.SortOrderInput | Prisma.SortOrder
  minOrder?: Prisma.SortOrderInput | Prisma.SortOrder
  openingHours?: Prisma.SortOrderInput | Prisma.SortOrder
  services?: Prisma.SortOrderInput | Prisma.SortOrder
  siteName?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  currency?: Prisma.SortOrderInput | Prisma.SortOrder
  order_outside_time?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SiteSettingsCountOrderByAggregateInput
  _avg?: Prisma.SiteSettingsAvgOrderByAggregateInput
  _max?: Prisma.SiteSettingsMaxOrderByAggregateInput
  _min?: Prisma.SiteSettingsMinOrderByAggregateInput
  _sum?: Prisma.SiteSettingsSumOrderByAggregateInput
}

export type SiteSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SiteSettingsScalarWhereWithAggregatesInput | Prisma.SiteSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SiteSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SiteSettingsScalarWhereWithAggregatesInput | Prisma.SiteSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"SiteSettings"> | number
  address?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  metaTitle?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  metaDescription?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SiteSettings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SiteSettings"> | Date | string
  contact?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  favicon?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  logo?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  minOrder?: Prisma.FloatNullableWithAggregatesFilter<"SiteSettings"> | number | null
  openingHours?: Prisma.JsonNullableWithAggregatesFilter<"SiteSettings">
  services?: Prisma.JsonNullableWithAggregatesFilter<"SiteSettings">
  siteName?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  title?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  currency?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
  order_outside_time?: Prisma.StringNullableWithAggregatesFilter<"SiteSettings"> | string | null
}

export type SiteSettingsCreateInput = {
  id?: number
  address?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact?: string | null
  description?: string | null
  favicon?: string | null
  logo?: string | null
  minOrder?: number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: string | null
  title?: string | null
  currency?: string | null
  order_outside_time?: string | null
}

export type SiteSettingsUncheckedCreateInput = {
  id?: number
  address?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact?: string | null
  description?: string | null
  favicon?: string | null
  logo?: string | null
  minOrder?: number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: string | null
  title?: string | null
  currency?: string | null
  order_outside_time?: string | null
}

export type SiteSettingsUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  favicon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  minOrder?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currency?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order_outside_time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SiteSettingsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  favicon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  minOrder?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currency?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order_outside_time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SiteSettingsCreateManyInput = {
  id?: number
  address?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact?: string | null
  description?: string | null
  favicon?: string | null
  logo?: string | null
  minOrder?: number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: string | null
  title?: string | null
  currency?: string | null
  order_outside_time?: string | null
}

export type SiteSettingsUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  favicon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  minOrder?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currency?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order_outside_time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SiteSettingsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metaDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  favicon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  minOrder?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  openingHours?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  services?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  siteName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currency?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order_outside_time?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type SiteSettingsOrderByRelevanceInput = {
  fields: Prisma.SiteSettingsOrderByRelevanceFieldEnum | Prisma.SiteSettingsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type SiteSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  address?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  description?: Prisma.SortOrder
  favicon?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  minOrder?: Prisma.SortOrder
  openingHours?: Prisma.SortOrder
  services?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  title?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  order_outside_time?: Prisma.SortOrder
}

export type SiteSettingsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  minOrder?: Prisma.SortOrder
}

export type SiteSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  address?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  description?: Prisma.SortOrder
  favicon?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  minOrder?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  title?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  order_outside_time?: Prisma.SortOrder
}

export type SiteSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  address?: Prisma.SortOrder
  metaTitle?: Prisma.SortOrder
  metaDescription?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  description?: Prisma.SortOrder
  favicon?: Prisma.SortOrder
  logo?: Prisma.SortOrder
  minOrder?: Prisma.SortOrder
  siteName?: Prisma.SortOrder
  title?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  order_outside_time?: Prisma.SortOrder
}

export type SiteSettingsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  minOrder?: Prisma.SortOrder
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type SiteSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  address?: boolean
  metaTitle?: boolean
  metaDescription?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean
  description?: boolean
  favicon?: boolean
  logo?: boolean
  minOrder?: boolean
  openingHours?: boolean
  services?: boolean
  siteName?: boolean
  title?: boolean
  currency?: boolean
  order_outside_time?: boolean
}, ExtArgs["result"]["siteSettings"]>



export type SiteSettingsSelectScalar = {
  id?: boolean
  address?: boolean
  metaTitle?: boolean
  metaDescription?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean
  description?: boolean
  favicon?: boolean
  logo?: boolean
  minOrder?: boolean
  openingHours?: boolean
  services?: boolean
  siteName?: boolean
  title?: boolean
  currency?: boolean
  order_outside_time?: boolean
}

export type SiteSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "address" | "metaTitle" | "metaDescription" | "createdAt" | "updatedAt" | "contact" | "description" | "favicon" | "logo" | "minOrder" | "openingHours" | "services" | "siteName" | "title" | "currency" | "order_outside_time", ExtArgs["result"]["siteSettings"]>

export type $SiteSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SiteSettings"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    address: string | null
    metaTitle: string | null
    metaDescription: string | null
    createdAt: Date
    updatedAt: Date
    contact: string | null
    description: string | null
    favicon: string | null
    logo: string | null
    minOrder: number | null
    openingHours: runtime.JsonValue | null
    services: runtime.JsonValue | null
    siteName: string | null
    title: string | null
    currency: string | null
    order_outside_time: string | null
  }, ExtArgs["result"]["siteSettings"]>
  composites: {}
}

export type SiteSettingsGetPayload<S extends boolean | null | undefined | SiteSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload, S>

export type SiteSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SiteSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SiteSettingsCountAggregateInputType | true
  }

export interface SiteSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteSettings'], meta: { name: 'SiteSettings' } }
  /**
   * Find zero or one SiteSettings that matches the filter.
   * @param {SiteSettingsFindUniqueArgs} args - Arguments to find a SiteSettings
   * @example
   * // Get one SiteSettings
   * const siteSettings = await prisma.siteSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SiteSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, SiteSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SiteSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SiteSettingsFindUniqueOrThrowArgs} args - Arguments to find a SiteSettings
   * @example
   * // Get one SiteSettings
   * const siteSettings = await prisma.siteSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SiteSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SiteSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SiteSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsFindFirstArgs} args - Arguments to find a SiteSettings
   * @example
   * // Get one SiteSettings
   * const siteSettings = await prisma.siteSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SiteSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, SiteSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SiteSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsFindFirstOrThrowArgs} args - Arguments to find a SiteSettings
   * @example
   * // Get one SiteSettings
   * const siteSettings = await prisma.siteSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SiteSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SiteSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SiteSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SiteSettings
   * const siteSettings = await prisma.siteSettings.findMany()
   * 
   * // Get first 10 SiteSettings
   * const siteSettings = await prisma.siteSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const siteSettingsWithIdOnly = await prisma.siteSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SiteSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, SiteSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SiteSettings.
   * @param {SiteSettingsCreateArgs} args - Arguments to create a SiteSettings.
   * @example
   * // Create one SiteSettings
   * const SiteSettings = await prisma.siteSettings.create({
   *   data: {
   *     // ... data to create a SiteSettings
   *   }
   * })
   * 
   */
  create<T extends SiteSettingsCreateArgs>(args: Prisma.SelectSubset<T, SiteSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SiteSettings.
   * @param {SiteSettingsCreateManyArgs} args - Arguments to create many SiteSettings.
   * @example
   * // Create many SiteSettings
   * const siteSettings = await prisma.siteSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SiteSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, SiteSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a SiteSettings.
   * @param {SiteSettingsDeleteArgs} args - Arguments to delete one SiteSettings.
   * @example
   * // Delete one SiteSettings
   * const SiteSettings = await prisma.siteSettings.delete({
   *   where: {
   *     // ... filter to delete one SiteSettings
   *   }
   * })
   * 
   */
  delete<T extends SiteSettingsDeleteArgs>(args: Prisma.SelectSubset<T, SiteSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SiteSettings.
   * @param {SiteSettingsUpdateArgs} args - Arguments to update one SiteSettings.
   * @example
   * // Update one SiteSettings
   * const siteSettings = await prisma.siteSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SiteSettingsUpdateArgs>(args: Prisma.SelectSubset<T, SiteSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SiteSettings.
   * @param {SiteSettingsDeleteManyArgs} args - Arguments to filter SiteSettings to delete.
   * @example
   * // Delete a few SiteSettings
   * const { count } = await prisma.siteSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SiteSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SiteSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SiteSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SiteSettings
   * const siteSettings = await prisma.siteSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SiteSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, SiteSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one SiteSettings.
   * @param {SiteSettingsUpsertArgs} args - Arguments to update or create a SiteSettings.
   * @example
   * // Update or create a SiteSettings
   * const siteSettings = await prisma.siteSettings.upsert({
   *   create: {
   *     // ... data to create a SiteSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SiteSettings we want to update
   *   }
   * })
   */
  upsert<T extends SiteSettingsUpsertArgs>(args: Prisma.SelectSubset<T, SiteSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__SiteSettingsClient<runtime.Types.Result.GetResult<Prisma.$SiteSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SiteSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsCountArgs} args - Arguments to filter SiteSettings to count.
   * @example
   * // Count the number of SiteSettings
   * const count = await prisma.siteSettings.count({
   *   where: {
   *     // ... the filter for the SiteSettings we want to count
   *   }
   * })
  **/
  count<T extends SiteSettingsCountArgs>(
    args?: Prisma.Subset<T, SiteSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SiteSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SiteSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SiteSettingsAggregateArgs>(args: Prisma.Subset<T, SiteSettingsAggregateArgs>): Prisma.PrismaPromise<GetSiteSettingsAggregateType<T>>

  /**
   * Group by SiteSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SiteSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SiteSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SiteSettingsGroupByArgs['orderBy'] }
      : { orderBy?: SiteSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SiteSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SiteSettings model
 */
readonly fields: SiteSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SiteSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SiteSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SiteSettings model
 */
export interface SiteSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"SiteSettings", 'Int'>
  readonly address: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly metaTitle: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly metaDescription: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly createdAt: Prisma.FieldRef<"SiteSettings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SiteSettings", 'DateTime'>
  readonly contact: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly description: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly favicon: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly logo: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly minOrder: Prisma.FieldRef<"SiteSettings", 'Float'>
  readonly openingHours: Prisma.FieldRef<"SiteSettings", 'Json'>
  readonly services: Prisma.FieldRef<"SiteSettings", 'Json'>
  readonly siteName: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly title: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly currency: Prisma.FieldRef<"SiteSettings", 'String'>
  readonly order_outside_time: Prisma.FieldRef<"SiteSettings", 'String'>
}
    

// Custom InputTypes
/**
 * SiteSettings findUnique
 */
export type SiteSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SiteSettings to fetch.
   */
  where: Prisma.SiteSettingsWhereUniqueInput
}

/**
 * SiteSettings findUniqueOrThrow
 */
export type SiteSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SiteSettings to fetch.
   */
  where: Prisma.SiteSettingsWhereUniqueInput
}

/**
 * SiteSettings findFirst
 */
export type SiteSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SiteSettings to fetch.
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SiteSettings to fetch.
   */
  orderBy?: Prisma.SiteSettingsOrderByWithRelationInput | Prisma.SiteSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SiteSettings.
   */
  cursor?: Prisma.SiteSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SiteSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SiteSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SiteSettings.
   */
  distinct?: Prisma.SiteSettingsScalarFieldEnum | Prisma.SiteSettingsScalarFieldEnum[]
}

/**
 * SiteSettings findFirstOrThrow
 */
export type SiteSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SiteSettings to fetch.
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SiteSettings to fetch.
   */
  orderBy?: Prisma.SiteSettingsOrderByWithRelationInput | Prisma.SiteSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SiteSettings.
   */
  cursor?: Prisma.SiteSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SiteSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SiteSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SiteSettings.
   */
  distinct?: Prisma.SiteSettingsScalarFieldEnum | Prisma.SiteSettingsScalarFieldEnum[]
}

/**
 * SiteSettings findMany
 */
export type SiteSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SiteSettings to fetch.
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SiteSettings to fetch.
   */
  orderBy?: Prisma.SiteSettingsOrderByWithRelationInput | Prisma.SiteSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SiteSettings.
   */
  cursor?: Prisma.SiteSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SiteSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SiteSettings.
   */
  skip?: number
  distinct?: Prisma.SiteSettingsScalarFieldEnum | Prisma.SiteSettingsScalarFieldEnum[]
}

/**
 * SiteSettings create
 */
export type SiteSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * The data needed to create a SiteSettings.
   */
  data: Prisma.XOR<Prisma.SiteSettingsCreateInput, Prisma.SiteSettingsUncheckedCreateInput>
}

/**
 * SiteSettings createMany
 */
export type SiteSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SiteSettings.
   */
  data: Prisma.SiteSettingsCreateManyInput | Prisma.SiteSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SiteSettings update
 */
export type SiteSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * The data needed to update a SiteSettings.
   */
  data: Prisma.XOR<Prisma.SiteSettingsUpdateInput, Prisma.SiteSettingsUncheckedUpdateInput>
  /**
   * Choose, which SiteSettings to update.
   */
  where: Prisma.SiteSettingsWhereUniqueInput
}

/**
 * SiteSettings updateMany
 */
export type SiteSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SiteSettings.
   */
  data: Prisma.XOR<Prisma.SiteSettingsUpdateManyMutationInput, Prisma.SiteSettingsUncheckedUpdateManyInput>
  /**
   * Filter which SiteSettings to update
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * Limit how many SiteSettings to update.
   */
  limit?: number
}

/**
 * SiteSettings upsert
 */
export type SiteSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * The filter to search for the SiteSettings to update in case it exists.
   */
  where: Prisma.SiteSettingsWhereUniqueInput
  /**
   * In case the SiteSettings found by the `where` argument doesn't exist, create a new SiteSettings with this data.
   */
  create: Prisma.XOR<Prisma.SiteSettingsCreateInput, Prisma.SiteSettingsUncheckedCreateInput>
  /**
   * In case the SiteSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SiteSettingsUpdateInput, Prisma.SiteSettingsUncheckedUpdateInput>
}

/**
 * SiteSettings delete
 */
export type SiteSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
  /**
   * Filter which SiteSettings to delete.
   */
  where: Prisma.SiteSettingsWhereUniqueInput
}

/**
 * SiteSettings deleteMany
 */
export type SiteSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SiteSettings to delete
   */
  where?: Prisma.SiteSettingsWhereInput
  /**
   * Limit how many SiteSettings to delete.
   */
  limit?: number
}

/**
 * SiteSettings without action
 */
export type SiteSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SiteSettings
   */
  select?: Prisma.SiteSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SiteSettings
   */
  omit?: Prisma.SiteSettingsOmit<ExtArgs> | null
}
